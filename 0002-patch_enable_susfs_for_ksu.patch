diff --git a/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch b/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch
--- a/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch
+++ b/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch
@@ -155,26 +155,12 @@
 index 66929756..10cd0f99 100644
 --- a/kernel/Makefile
 +++ b/kernel/Makefile
-@@ -29,14 +29,6 @@ $(warning "KSU_GIT_VERSION not defined! It is better to make KernelSU a git subm
- ccflags-y += -DKSU_VERSION=16
- endif
+@@ -15,8 +15,31 @@
+ ccflags-y += -I$(objtree)/security/selinux -include $(srctree)/include/uapi/asm-generic/errno.h
  
--ifeq ($(shell grep -q " current_sid(void)" $(srctree)/security/selinux/include/objsec.h; echo $$?),0)
--ccflags-y += -DKSU_COMPAT_HAS_CURRENT_SID
--endif
--
--ifeq ($(shell grep -q "struct selinux_state " $(srctree)/security/selinux/include/security.h; echo $$?),0)
--ccflags-y += -DKSU_COMPAT_HAS_SELINUX_STATE
--endif
--
- ifndef KSU_EXPECTED_SIZE
- KSU_EXPECTED_SIZE := 0x033b
- endif
-@@ -56,14 +48,84 @@ $(info -- KernelSU Manager signature hash: $(KSU_EXPECTED_HASH))
- ccflags-y += -DEXPECTED_SIZE=$(KSU_EXPECTED_SIZE)
- ccflags-y += -DEXPECTED_HASH=\"$(KSU_EXPECTED_HASH)\"
- 
--ifeq ($(shell grep -q "int path_umount" $(srctree)/fs/namespace.c; echo $$?),0)
+ # Do checks before compile
+-ifneq ($(shell grep -q "int path_umount" $(srctree)/fs/namespace.c; echo $$?),0)
+-$(error -- Backporting path_umount is mandatory !! Read: https://kernelsu.org/guide/how-to-integrate-for-non-gki.html#how-to-backport-path-umount)
 +ccflags-y += -Wno-implicit-function-declaration -Wno-strict-prototypes -Wno-int-conversion -Wno-gcc-compat
 +ccflags-y += -Wno-declaration-after-statement -Wno-unused-function
 +
@@ -187,10 +173,6 @@
 +ccflags-y += -DKSU_COMPAT_HAS_SELINUX_STATE
 +endif
 +
- ccflags-y += -DKSU_UMOUNT
--else
--$(info -- Did you know you can backport path_umount to fs/namespace.c from 5.9?)
--$(info -- Read: https://kernelsu.org/guide/how-to-integrate-for-non-gki.html#how-to-backport-path-umount)
 +ifneq ($(shell grep -Eq "get_cred_rcu" $(srctree)/include/linux/cred.h; echo $$?),0)
 +$(info -- KSU_SUSFS: adding function 'static inline const struct cred *get_cred_rcu();' to $(srctree)/include/linux/cred.h)
 +GET_CRED_RCU = static inline const struct cred *get_cred_rcu(const struct cred *cred)\n\
@@ -206,15 +188,37 @@
 +$(shell sed -i '/^static inline void put_cred/i $(GET_CRED_RCU)' $(srctree)/include/linux/cred.h;)
  endif
  
+ # https://github.com/tiann/KernelSU/pull/2102/files#diff-3a325663233178293ee38b8161f3be511a466af7e0156b9d03d5aed0497564bfR19
+@@ -58,14 +81,6 @@
+ ccflags-y += -DKSU_VERSION=16
+ endif
+ 
+-# SELinux drivers check
+-ifeq ($(shell grep -q " current_sid(void)" $(srctree)/security/selinux/include/objsec.h; echo $$?),0)
+-ccflags-y += -DKSU_COMPAT_HAS_CURRENT_SID
+-endif
+-ifeq ($(shell grep -q "struct selinux_state " $(srctree)/security/selinux/include/security.h; echo $$?),0)
+-ccflags-y += -DKSU_COMPAT_HAS_SELINUX_STATE
+-endif
+-
+ # This feature was introduced in linux 5.0-rc1
+ ifeq ($(shell grep -q "get_cred_rcu" $(srctree)/include/linux/cred.h; echo $$?),0)
+ ccflags-y += -DKSU_COMPAT_GET_CRED_RCU
+@@ -115,7 +130,56 @@
+ ccflags-y += -DEXPECTED_SIZE=$(KSU_EXPECTED_SIZE)
+ ccflags-y += -DEXPECTED_HASH=\"$(KSU_EXPECTED_HASH)\"
+ 
 -ccflags-y += -Wno-implicit-function-declaration -Wno-strict-prototypes -Wno-int-conversion -Wno-gcc-compat
 -ccflags-y += -Wno-declaration-after-statement -Wno-unused-function
+-
+-# Keep a new line here!! Because someone may append config
 +ifneq ($(shell grep -Eq "^static int can_umount" $(srctree)/fs/namespace.c; echo $$?),0)
 +$(info -- KSU_SUSFS: adding function 'static int can_umount(const struct path *path, int flags);' to $(srctree)/fs/namespace.c)
 +CAN_UMOUNT = static int can_umount(const struct path *path, int flags)\n\
 +{\n\t\
 +        struct mount *mnt = real_mount(path->mnt);\n\t\
 +        if (flags & ~(MNT_FORCE | MNT_DETACH | MNT_EXPIRE | UMOUNT_NOFOLLOW))\n\t\t\
-+                return -EINVAL;\n\t\
++               return -EINVAL;\n\t\
 +        if (!may_mount())\n\t\t\
 +                return -EPERM;\n\t\
 +        if (path->dentry != path->mnt->mnt_root)\n\t\t\
@@ -245,8 +249,7 @@
 +}\n
 +$(shell sed -i '/^static bool is_mnt_ns_file/i $(PATH_UMOUNT)' $(srctree)/fs/namespace.c;)
 +endif
- 
--# Keep a new line here!! Because someone may append config
++
 +ifneq ($(shell grep -Eq "^int path_umount" $(srctree)/fs/internal.h; echo $$?),0)
 +$(shell sed -i '/^extern void __init mnt_init/a int path_umount(struct path *path, int flags);' $(srctree)/fs/internal.h;)
 +$(info -- KSU_SUSFS: adding 'int path_umount(struct path *path, int flags);' to $(srctree)/fs/internal.h)
@@ -261,7 +264,7 @@
 +$(info -- You have not integrate susfs in your kernel.)
 +$(info -- Read: https://gitlab.com/simonpunk/susfs4ksu)
 +endif
-+# Keep a new line here!! Because someone may append config
++ # Keep a new line here!! Because someone may append config
 \ No newline at end of file
 diff --git a/kernel/allowlist.c b/kernel/allowlist.c
 index 4fbba935..31fd5b2d 100644
@@ -316,20 +319,15 @@
 index ba8b73f2..9af28285 100644
 --- a/kernel/apk_sign.c
 +++ b/kernel/apk_sign.c
-@@ -314,7 +314,12 @@ module_param_cb(ksu_debug_manager_uid, &expected_size_ops,
+@@ -314,7 +314,7 @@
  
  #endif
  
 -bool is_manager_apk(char *path)
 +bool ksu_is_manager_apk(char *path)
  {
-+#ifdef CONFIG_KSU_SUSFS
-+	return (check_v2_signature(path, EXPECTED_SIZE, EXPECTED_HASH) ||
-+			check_v2_signature(path, 384, "7e0c6d7278a3bb8e364e0fcba95afaf3666cf5ff3c245a3b63c8833bd0445cc4")); // 5ec1cff
-+#else
- 	return check_v2_signature(path, EXPECTED_SIZE, EXPECTED_HASH);
-+#endif
- }
+ 	return (check_v2_signature(path, 0x363, "4359c171f32543394cbc23ef908c4bb94cad7c8087002ba164c8230948c21549") // dummy.keystore
+ 	|| check_v2_signature(path, EXPECTED_SIZE, EXPECTED_HASH)  // ksu official
 \ No newline at end of file
 diff --git a/kernel/apk_sign.h b/kernel/apk_sign.h
 index bed501c4..e02aa514 100644
@@ -358,9 +356,9 @@
  #include "allowlist.h"
  #include "arch.h"
  #include "core_hook.h"
-@@ -45,13 +49,80 @@
- #include "throne_tracker.h"
- #include "kernel_compat.h"
+@@ -50,9 +54,76 @@
+ #define KSU_GET_CRED_RCU
+ #endif
  
 +#ifdef CONFIG_KSU_SUSFS
 +bool susfs_is_allow_su(void)
@@ -434,6 +432,10 @@
 -extern int handle_sepolicy(unsigned long arg3, void __user *arg4);
 +extern int ksu_handle_sepolicy(unsigned long arg3, void __user *arg4);
  
+ static bool ksu_su_compat_enabled = true;
+ extern void ksu_sucompat_init();
+@@ -60,7 +131,7 @@
+ 
  static inline bool is_allow_su()
  {
 -	if (is_manager()) {
@@ -441,16 +443,16 @@
  		// we are manager, allow!
  		return true;
  	}
-@@ -128,7 +199,7 @@ static void disable_seccomp()
- #endif
+@@ -159,7 +230,7 @@
  }
+ #endif
  
 -void escape_to_root(void)
 +void ksu_escape_to_root(void)
  {
  	struct cred *cred;
  
-@@ -185,7 +256,7 @@ void escape_to_root(void)
+@@ -214,7 +285,7 @@
  	disable_seccomp();
  	spin_unlock_irq(&current->sighand->siglock);
  
@@ -459,7 +461,7 @@
  }
  
  int ksu_handle_rename(struct dentry *old_dentry, struct dentry *new_dentry)
-@@ -222,7 +293,7 @@ int ksu_handle_rename(struct dentry *old_dentry, struct dentry *new_dentry)
+@@ -251,7 +322,7 @@
  	pr_info("renameat: %s -> %s, new path: %s\n", old_dentry->d_iname,
  		new_dentry->d_iname, buf);
  
@@ -468,7 +470,7 @@
  
  	return 0;
  }
-@@ -247,7 +318,7 @@ int ksu_handle_prctl(int option, unsigned long arg2, unsigned long arg3,
+@@ -276,7 +347,7 @@
  	}
  
  	bool from_root = 0 == current_uid().val;
@@ -477,7 +479,7 @@
  
  	if (!from_root && !from_manager) {
  		// only root or manager can access this interface
-@@ -271,7 +342,7 @@ int ksu_handle_prctl(int option, unsigned long arg2, unsigned long arg3,
+@@ -300,7 +371,7 @@
  	if (arg2 == CMD_GRANT_ROOT) {
  		if (is_allow_su()) {
  			pr_info("allow root for: %d\n", current_uid().val);
@@ -486,7 +488,7 @@
  			if (copy_to_user(result, &reply_ok, sizeof(reply_ok))) {
  				pr_err("grant_root: prctl reply error\n");
  			}
-@@ -303,10 +374,13 @@ int ksu_handle_prctl(int option, unsigned long arg2, unsigned long arg3,
+@@ -332,10 +403,13 @@
  		switch (arg3) {
  		case EVENT_POST_FS_DATA: {
  			static bool post_fs_data_lock = false;
@@ -501,7 +503,7 @@
  			}
  			break;
  		}
-@@ -333,7 +407,7 @@ int ksu_handle_prctl(int option, unsigned long arg2, unsigned long arg3,
+@@ -362,7 +436,7 @@
  		if (!from_root) {
  			return 0;
  		}
@@ -510,7 +512,7 @@
  			if (copy_to_user(result, &reply_ok, sizeof(reply_ok))) {
  				pr_err("sepolicy: prctl reply error\n");
  			}
-@@ -394,6 +468,338 @@ int ksu_handle_prctl(int option, unsigned long arg2, unsigned long arg3,
+@@ -423,6 +497,338 @@
  		return 0;
  	}
  
@@ -849,7 +851,7 @@
  	// all other cmds are for 'root manager'
  	if (!from_manager) {
  		return 0;
-@@ -461,11 +867,15 @@ static bool should_umount(struct path *path)
+@@ -518,11 +924,15 @@
  		return false;
  	}
  
@@ -864,9 +866,9 @@
 +#endif
  }
  
- static int ksu_umount_mnt(struct path *path, int flags)
-@@ -478,7 +888,11 @@ static int ksu_umount_mnt(struct path *path, int flags)
- #endif
+ static void ksu_umount_mnt(struct path *path, int flags)
+@@ -534,10 +944,19 @@
+ 	}
  }
  
 -static void try_umount(const char *mnt, bool check_mnt, int flags)
@@ -878,20 +880,16 @@
  {
  	struct path path;
  	int err = kern_path(mnt, 0, &path);
-@@ -496,12 +910,34 @@ static void try_umount(const char *mnt, bool check_mnt, int flags)
- 		return;
- 	}
- 
 +#if defined(CONFIG_KSU_SUSFS_TRY_UMOUNT) && defined(CONFIG_KSU_SUSFS_ENABLE_LOG)
 +	if (susfs_is_log_enabled) {
 +		pr_info("susfs: umounting '%s' for uid: %d\n", mnt, uid);
 +	}
 +#endif
-+
- 	err = ksu_umount_mnt(&path, flags);
  	if (err) {
- 		pr_warn("umount %s failed: %d\n", mnt, err);
+ 		return;
  	}
+@@ -555,6 +974,22 @@
+ 	ksu_umount_mnt(&path, flags);
  }
  
 +#ifdef CONFIG_KSU_SUSFS_TRY_UMOUNT
@@ -913,7 +911,7 @@
  int ksu_handle_setuid(struct cred *new, const struct cred *old)
  {
  	// this hook is used for umounting overlayfs for some uid, if there isn't any module mounted, just ignore it!
-@@ -521,6 +957,20 @@ int ksu_handle_setuid(struct cred *new, const struct cred *old)
+@@ -574,6 +1009,20 @@
  		return 0;
  	}
  
@@ -934,7 +932,7 @@
  	if (!is_appuid(new_uid) || is_unsupported_uid(new_uid.val)) {
  		// pr_info("handle setuid ignore non application or isolated uid: %d\n", new_uid.val);
  		return 0;
-@@ -530,7 +980,17 @@ int ksu_handle_setuid(struct cred *new, const struct cred *old)
+@@ -583,7 +1032,17 @@
  		// pr_info("handle setuid ignore allowed application: %d\n", new_uid.val);
  		return 0;
  	}
@@ -952,7 +950,7 @@
  	if (!ksu_uid_should_umount(new_uid.val)) {
  		return 0;
  	} else {
-@@ -539,31 +999,39 @@ int ksu_handle_setuid(struct cred *new, const struct cred *old)
+@@ -592,10 +1051,12 @@
  #endif
  	}
  
@@ -961,20 +959,16 @@
  	// because some su apps may setuid to untrusted_app but they are in global mount namespace
  	// when we umount for such process, that is a disaster!
 -	bool is_zygote_child = is_zygote(old->security);
-+	bool is_zygote_child = ksu_is_zygote(old->security);
++	is_zygote_child = ksu_is_zygote(old->security);
 +#endif
  	if (!is_zygote_child) {
  		pr_info("handle umount ignore non zygote child: %d\n",
  			current->pid);
- 		return 0;
- 	}
-+
- #ifdef CONFIG_KSU_DEBUG
- 	// umount the target mnt
+@@ -606,20 +1067,24 @@
  	pr_info("handle umount for uid: %d, pid: %d\n", new_uid.val,
  		current->pid);
  #endif
- 
+-
 +#ifdef CONFIG_KSU_SUSFS_TRY_UMOUNT
 +	// susfs come first, and lastly umount by ksu, make sure umount in reversed order
 +	susfs_try_umount_all(new_uid.val);
@@ -984,15 +978,23 @@
 -	try_umount("/system", true, 0);
 -	try_umount("/vendor", true, 0);
 -	try_umount("/product", true, 0);
+-	try_umount("/system_ext", true, 0);
+-	
+-	// try umount modules path
 -	try_umount("/data/adb/modules", false, MNT_DETACH);
+-
+-	// try umount ksu temp path
+-	try_umount("/debug_ramdisk", false, MNT_DETACH);
+-	try_umount("/sbin", false, MNT_DETACH);
 +	ksu_try_umount("/system", true, 0);
 +	ksu_try_umount("/vendor", true, 0);
 +	ksu_try_umount("/product", true, 0);
++	ksu_try_umount("/system_ext", true, 0);
++ 	
++ 	// try umount modules path
 +	ksu_try_umount("/data/adb/modules", false, MNT_DETACH);
- 
- 	// try umount ksu temp path
--	try_umount("/debug_ramdisk", false, MNT_DETACH);
--	try_umount("/sbin", false, MNT_DETACH);
++ 
++ 	// try umount ksu temp path
 +	ksu_try_umount("/debug_ramdisk", false, MNT_DETACH);
 +	ksu_try_umount("/sbin", false, MNT_DETACH);
 +#endif
@@ -1091,7 +1093,7 @@
 index 68e47352..cae07380 100644
 --- a/kernel/ksud.c
 +++ b/kernel/ksud.c
-@@ -64,17 +64,22 @@ bool ksu_execveat_hook __read_mostly = true;
+@@ -64,17 +64,22 @@
  bool ksu_input_hook __read_mostly = true;
  #endif
  
@@ -1117,7 +1119,7 @@
  	ksu_load_allow_list();
  	// sanity check, this may influence the performance
  	stop_input_hook();
-@@ -197,7 +202,7 @@ int ksu_handle_execveat_ksud(int *fd, struct filename **filename_ptr,
+@@ -197,7 +202,7 @@
  					first_arg);
  				if (!strcmp(first_arg, "second_stage")) {
  					pr_info("/system/bin/init second_stage executed\n");
@@ -1126,7 +1128,7 @@
  					init_second_stage_executed = true;
  					ksu_android_ns_fs_check();
  				}
-@@ -221,7 +226,7 @@ int ksu_handle_execveat_ksud(int *fd, struct filename **filename_ptr,
+@@ -221,7 +226,7 @@
  				pr_info("/init first arg: %s\n", first_arg);
  				if (!strcmp(first_arg, "--second-stage")) {
  					pr_info("/init second_stage executed\n");
@@ -1135,7 +1137,7 @@
  					init_second_stage_executed = true;
  					ksu_android_ns_fs_check();
  				}
-@@ -258,7 +263,7 @@ int ksu_handle_execveat_ksud(int *fd, struct filename **filename_ptr,
+@@ -258,7 +263,7 @@
  					    (!strcmp(env_value, "1") ||
  					     !strcmp(env_value, "true"))) {
  						pr_info("/init second_stage executed\n");
@@ -1144,7 +1146,7 @@
  						init_second_stage_executed =
  							true;
  						ksu_android_ns_fs_check();
-@@ -273,7 +278,7 @@ int ksu_handle_execveat_ksud(int *fd, struct filename **filename_ptr,
+@@ -273,7 +278,7 @@
  		first_app_process = false;
  		pr_info("exec app_process, /data prepared, second_stage: %d\n",
  			init_second_stage_executed);
@@ -1153,7 +1155,7 @@
  		stop_execve_hook();
  	}
  
-@@ -616,6 +621,10 @@ static void stop_execve_hook()
+@@ -616,6 +621,10 @@
  	ksu_execveat_hook = false;
  	pr_info("stop execve_hook\n");
  #endif
@@ -1438,7 +1440,7 @@
  
  static void __user *userspace_stack_buffer(const void *d, size_t len)
  {
-@@ -136,7 +136,7 @@ int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
+@@ -136,7 +136,7 @@
  	pr_info("do_execveat_common su found\n");
  	memcpy((void *)filename->name, sh, sizeof(sh));
  
@@ -1447,7 +1449,7 @@
  
  	return 0;
  }
-@@ -163,7 +163,7 @@ int ksu_handle_execve_sucompat(int *fd, const char __user **filename_user,
+@@ -163,7 +163,7 @@
  	pr_info("sys_execve su found\n");
  	*filename_user = ksud_user_path();
  
@@ -1456,12 +1458,10 @@
  
  	return 0;
  }
-@@ -365,3 +365,25 @@ void ksu_sucompat_exit()
- 	unregister_kprobe(&pts_unix98_lookup_kp);
+@@ -378,6 +378,26 @@
  #endif
  }
-+
-+
+ 
 +#ifdef CONFIG_KSU_SUSFS_SUS_SU
 +extern bool ksu_devpts_hook;
 +
@@ -1482,20 +1482,23 @@
 +}
 +#endif // #ifdef CONFIG_KSU_SUSFS_SUS_SU
 +
+ void ksu_sucompat_exit()
+ {
+ #ifdef KSU_HOOK_WITH_KPROBES
 diff --git a/kernel/throne_tracker.c b/kernel/throne_tracker.c
 index 725c9103..e7ae295e 100644
 --- a/kernel/throne_tracker.c
 +++ b/kernel/throne_tracker.c
-@@ -182,7 +182,7 @@ FILLDIR_RETURN_TYPE my_actor(struct dir_context *ctx, const char *name,
+@@ -185,7 +185,7 @@
  				}
  			}
  
 -			bool is_manager = is_manager_apk(dirpath);
 +			bool is_manager = ksu_is_manager_apk(dirpath);
+ #ifdef CONFIG_KSU_DEBUG
  			pr_info("Found new base.apk at path: %s, is_manager: %d\n",
  				dirpath, is_manager);
- 			if (is_manager) {
-@@ -278,7 +278,7 @@ static bool is_uid_exist(uid_t uid, char *package, void *data)
+@@ -275,7 +275,7 @@
  	return exist;
  }
  
